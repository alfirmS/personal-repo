pipeline {
  environment {
    Version_Major = 1
    Version_Minor = 0
    Version_Patch = 0
    String BUILD_ENV = 'uat'
    IMAGE_NAME = "adira-ent-registry-registry-vpc.ap-southeast-5.cr.aliyuncs.com/sales/uat-ad1-sales-idm"
    IMAGE_TAG = "${Version_Major}.${Version_Minor}.${Version_Patch}-${BUILD_TIMESTAMP}-${env.BUILD_NUMBER}"
    cluster_context = credentials('cluster-context')
    cluster_user = credentials('cluster-user')
    String SonarProjectKey = 'ad1-sales-idm'
    String SonarHost = 'http://10.161.17.144:9000/dashboard?id='
    String SPRING_ACTIVE_PROFILE = 'uat-gcp'
  	namespace = "sales"
  }

  agent {
    kubernetes {
      
      defaultContainer 'jnlp'
      yaml """
        apiVersion: v1
        kind: Pod
        metadata:
        labels:
          component: ci
        spec:
          # Use service account that can deploy to all namespaces
          
          containers: 
          - name: maven
            image: maven:3.6.3-jdk-11
            imagePullPolicy: IfNotPresent
            command:
            - cat
            tty: true 
          - name: helm
            image: trainingad1/helm3
            imagePullPolicy: IfNotPresent
            command:
            - cat
            tty: true
          - name: kaniko
            image: gcr.io/kaniko-project/executor:debug-539ddefcae3fd6b411a95982a830d987f4214251
            imagePullPolicy: IfNotPresent
            command:
            - /busybox/cat
            tty: true
            volumeMounts:
              - name: docker-config
                mountPath: /kaniko/.docker
          volumes:
          - name: docker-config
            projected:
              sources:
              - secret:
                  name: regcred
                  items:
                    - key: .dockerconfigjson
                      path: config.json
      """
    }
  }


  stages {
    stage('build') {
      steps {
        container('maven') {
          sh """
            echo "******** currently executing Build stage ********"
            mvn  clean package
          """
      }
    }
  }

  stage('sonarqube') {
      steps {
          withSonarQubeEnv('sonarqube-uat') {
        container('maven') {
          sh """
            echo "******** currently executing sonarqube stage ********"
            mvn clean verify sonar:sonar \
              -Dsonar.projectKey=ad1-sales-idm \
              -Dsonar.host.url=http://10.50.7.220:9000 \
              -Dsonar.login=sqp_1fd089e7ef2b00c62d62e04124aa5bf9799399d9
          """
        }
      }
    }
  }

  /*stage("Quality gate") {
            steps {
                echo "******** currently executing Quality gate stage ********"
                waitForQualityGate abortPipeline: false
    }
  }*/
  
  stage('kaniko and push image to ali cloud private registry') {
      steps {
        container('kaniko') {
          sh """
              echo "******** currently executing kaniko stage *******"
                #ls -la
                #pwd
                #cp $workspace/target/idm-0.0.1-SNAPSHOT.jar ./idm-0.0.1-SNAPSHOT.jar
                ls -la
              /kaniko/executor \
              --dockerfile=`pwd`/Dockerfile-uat-gcp \
              --context=`pwd` \
              --destination="${ IMAGE_NAME}:${IMAGE_TAG}" \
              --destination="registry.cloud.tenable.com/${env.NAMESPACE}:${GIT_URL.replaceFirst(/^.*\/([^\/]+?).git$/, '$1')}-${BUILD_ENV}-${BUILD_TIMESTAMP}-${BUILD_NUMBER}"
            """
      }
    }
  }

  stage('helm GCP') {
      steps {
        container('helm') {
          withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'bpr-uat', contextName: '', credentialsId: 'jenkins-deployer', namespace: '', serverUrl: 'https://34.101.110.89']]) {
          sh """
              echo "******** currently executing deployment stage ********"
              kubectl get nodes
              helm upgrade -i ad1-sales-idm  helm/ad1-sales-idm-gcp -f helm/ad1-sales-idm-gcp/values-uat-gcp.yaml -n ${namespace} --set=image.tag=${IMAGE_TAG}
	    	      kubectl get pods -n ${namespace}
              helm ls -n ${namespace}
             """
      }
    }
  } 

    /*post {
        failure {
              mail to: 'syam.arifin@adira.co.id,zestado.yudha@adira.co.id,riski.melati@adira.co.id,v.muhamad.haikal@adira.co.id','destiana.saputri@adira.co.id','v.yahya.abdurrozaq@adira.co.id','rezky.revindo@adira.co.id','sholeh.firmansyah@adira.co.id',
                subject: "FAILED: Build ${env.JOB_NAME} in Development Branch",
                body: "Build failed ${env.JOB_NAME} build no: ${env.BUILD_NUMBER}.\n\nView the log at:\n ${env.BUILD_URL}\n\nSee The SonarQube Report : ${SonarHost}${SonarProjectKey}"
        }
    success{
            mail to: 'syam.arifin@adira.co.id,zestado.yudha@adira.co.id,riski.melati@adira.co.id,v.muhamad.haikal@adira.co.id','destiana.saputri@adira.co.id','v.yahya.abdurrozaq@adira.co.id','rezky.revindo@adira.co.id','sholeh.firmansyah@adira.co.id',
                subject: "SUCCESSFUL: Build ${env.JOB_NAME} in Development Branch",
                body: "Build Successful ${env.JOB_NAME} build no: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nSee The SonarQube Report : ${SonarHost}${SonarProjectKey}"
        }
        aborted{
            mail to: 'syam.arifin@adira.co.id,zestado.yudha@adira.co.id,riski.melati@adira.co.id,v.muhamad.haikal@adira.co.id','destiana.saputri@adira.co.id','v.yahya.abdurrozaq@adira.co.id','rezky.revindo@adira.co.id','sholeh.firmansyah@adira.co.id',
                subject: "ABORTED: Build ${env.JOB_NAME} in Development Branch",
                body: "Build was aborted ${env.JOB_NAME} build no: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nSee The SonarQube Report : ${SonarHost}${SonarProjectKey}"
        }
      }*/

    }
  }
}
